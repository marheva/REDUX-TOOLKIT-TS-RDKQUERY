import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { ServerResponseType, UserRepositoryPropsTypes, UserType } from './types';

export const githubApi = createApi({
    reducerPath: 'github/api',
    baseQuery: fetchBaseQuery({ baseUrl: 'https://api.github.com/' }),
    refetchOnFocus: true,
    endpoints: (build) => {
        return {
            /**
             * users?q=marheva&per_page=10;
             * for my App I should use another query parameters;
             */
            searchUsers: build.query<UserType[], string>({
                query: (search: string) => ({
                    url: 'search/users',
                    params: {
                        q: search,
                        per_page: 10,
                    },
                }),
                // looks like GQL
                /**
                 * response =
                 *      incomplete_results: false
                 *      items: […]
                 *      total_count: 52
                 *      returns =>
                 *      items: […]
                 * we using `response.items`
                 * response =
                 *      [...]
                 */
                transformResponse: (response: ServerResponseType<UserType>) => response.items,
            }),
            // <responseTypes, string => requestTypes> => because (username: string);
            getUserRepos: build.query<UserRepositoryPropsTypes[], string>({
                query: (username: string) => ({
                    url: `users/${username}/repos`,
                    params: {},
                }),
            }),
            createUser: build.mutation<any, any>({
                query: () => ({
                    url: `...`,
                    method: 'POST',
                    body: {},
                }),
            }),
        };
    },
});

// dynamically generated by RTKQuery;
// useLazy we can do this request when we will need (after the click for example);
export const { useSearchUsersQuery, useLazyGetUserReposQuery } = githubApi;
